#!/usr/bin/env ansible-playbook
---

- name: &check_a_v Checks ansible version
  hosts: all
  gather_facts: False
  tags: check-ansible-version
  vars:
    default_min_ansible_version: 2.4.0
    local_min_ansible_version: '{{ min_ansible_version | default(default_min_ansible_version) }}'
  tasks:
    - fail:
        msg: min ansible version is {{ local_min_ansible_version }}, ansible version is {{ ansible_version.string }}
      when: ansible_version.string | version_compare(local_min_ansible_version, 'lt')
      check_mode: False
      run_once: True
      delegate_to: localhost
      tags: always
      name: *check_a_v

- name: Checks we are on deskstop and in staff group
  hosts: localhost
  gather_facts: False
  tags: asserts
  tasks:
    - include_tasks: tasks/assert-{{ item }}.yml
      with_items: [ desktop, local-group ]

- name: Does not use geerlingguy.ansible-role-packer
  hosts: localhost
  gather_facts: True
  tasks:
    - set_fact:
        nope:
          - import_role: { name: geerlingguy.ansible-role-packer }
            become: True

- name: Defines YAML macros
  hosts: localhost
  gather_facts: False
  vars:
    macros:
      ro: &ro
        changed_when: False
        check_mode: False

- name: Gets and integrity checks Packer files
  hosts: local
  gather_facts: True
  tags: get-packer-files

  tasks:
    
    - set_fact:
        arch2ext:
          x86_64: amd64

    - tags: get-files
      vars: &files
        name: packer
        version: 1.0.4
        dist: /usr/local/dist
        bin: /usr/local/bin
        site: 'https://releases.hashicorp.com'
        base: '{{ name }}/{{version}}/{{ name }}_{{version}}'
        zip: '{{ base}}_{{ ansible_system | lower }}_{{ arch2ext[ansible_architecture] }}.zip'
        sum: '{{ base}}_SHA256SUMS'
        sig: '{{ sum }}.sig'
        urls:
          zip: '{{ site }}/{{ zip }}'
          sum: '{{ site }}/{{ sum }}'
          sig: '{{ site }}/{{ sig }}'
        files:
          zip: '{{ dist }}/{{ zip | basename }}'
          sum: '{{ dist }}/{{ sum | basename }}'
          sig: '{{ dist }}/{{ sig | basename }}'
      block:
        - debug: { verbosity: 1, msg: 'get url {{ urls.zip }}' }
        - file:
            path: '{{ dist }}'
            group: staff
            mode: g+ws
          become: True
          name: creates '{{ dist }}'
        - block:
          - set_fact:
              comment: |
                See https://github.com/ansible/ansible/issues/25402
          - get_url:
              url: '{{ item }}'
              dest: '{{ dist }}'
            with_dict: '{{ urls }}'
            when: False
            loop_control: &label { label: '{{ item.value | basename }}' }
            name: get files using get_url
        - command: curl -Os {{ item.value }}
          args:
            chdir: '{{ dist }}'
            creates: '{{ item.value | basename }}'
          with_dict: '{{ urls }}'
          loop_control: *label
          name: get files using curl

    - tags: get-key
      vars:
        key:
          id: 51852D87348FFC4C
          url: 'https://keybase.io/hashicorp/pgp_keys.asc'
      block:
        - debug: { verbosity: 1, msg: 'import Hashicorp GPG public key {{ key.id }}' }
        - <<: *ro
          command: gpg -k {{ key.id }}
          register: gpg
          failed_when: gpg.rc == 1
          name: lists key
        - command: gpg --receive-keys {{ key.id }}
          when: gpg.rc == 2
          name: receive key

    - tags: check-files
      vars: *files
      block:
        - debug: { verbosity: 1, msg: 'check Hashicorp files integrity' }
        - <<: *ro
          command: gpg --verify {{ files.sig }} {{ files.sum }}
          name: verifies signed checksum file
        - <<: *ro
          command: grep {{ zip | basename }} {{ files.sum }}
          register: grep
          name: gets deb file checksum
        - <<: *ro
          command: shasum -a 256 -c
          args:
            chdir: '{{ dist }}'
            stdin: '{{ grep.stdout }}'
          name: checks deb file checksum

    - tags: install-packer
      vars: *files
      unarchive:
        src: '{{ files.zip }}'
        dest: '{{ bin }}'
        creates: '{{ bin }}/{{ name }}'
