#!/usr/bin/env ansible-playbook
---

- hosts: localhost
  connection: local
  gather_facts: False
  name: Sets macros

  vars:
    macros:
      - &ro
        changed_when: False
        check_mode: False
      - &rolo
        <<: *ro
        delegate_to: localhost
        run_once: True

    env_vars: [ USER, SHELL ]
    envs: |
      {
        {% for var in env_vars %}
          '{{ var }}': '{{ lookup("env", var) }}',
        {% endfor %}
      }

- hosts: all
  gather_facts: True
  name: Clones user account

  tasks:

    - command: id -un
      register: id
      <<: *rolo
      name: Gets user login

    - command: git config --get user.name
      register: git
      <<: *rolo
      name: Gets user name

    - set_fact:
        user: '{{ id.stdout }}'
        name: '{{ git.stdout }}'
        shell: '{{ ansible_env.SHELL }}'
      <<: *rolo
      name: Gets user SHELL

    - set_fact:
        password: |-
          {{ lookup('passwordstore', passwordstore_prefix ~ '/' ~ user ~ '@' ~ inventory_hostname ) }}
      no_log: True
      <<: *rolo
      vars: { passwordstore_prefix: '{{ psp | default("node") }}' }
      name: Gets user password

    - command: mkpasswd -sm sha-512
      args: { stdin: '{{ password }}' }
      register: mkpasswd
      <<: *rolo
      name: Generates encrypted password

    - set_fact: { ansible_become_pass: '{{ password }}' }
      no_log: True
      when: ansible_user is not defined or ansible_user != 'root'
      name: Sets ansible_become_pass

    - user:
        name: &user '{{ user }}'
        password: '{{ password }}'
        update_password: on_create
        shell: '{{ shell }}'
        comment: '{{ name }}'
        groups: sudo
        append: True
      become: True
      name: Create user

    - command: ssh-add -L
      register: keys
      <<: *rolo
      name: Gets user keys

    - authorized_key:
        user: *user
        key: '{{ item }}'
      with_items: '{{ keys.stdout_lines }}'
      loop_control: { label: '{{ item.split(" ")[2] }}' }
      become: True
      name: Adds user keys

    - command: getent group staff
      register: getent
      <<: *ro
      failed_when: getent.rc == 1 or getent.rc == 3
      name: Checks staff group

    - user:
        name: *user
        groups: staff
        append: True
      when: getent.stdout_lines | count
      become: True
      name: Puts user in staff group
